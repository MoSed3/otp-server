package config

import (
	"fmt"
	"log"
	"os"
	"regexp"
	"strconv"

	"github.com/joho/godotenv"
)

// ipPattern Regular expression pattern for validating an IP address
var ipRe = regexp.MustCompile(`^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$`)

type DatabaseConfig struct {
	URL            string
	PoolSize       int
	MaxOverflow    int
	EchoSQLQueries bool
	AutogenerateDB bool
}

type RedisConfig struct {
	Host     string
	Port     int
	DB       int
	Password string
}

type ServerConfig struct {
	WebAppHost string
	WebAppPort int
	CertFile   string
	KeyFile    string
}

type Config struct {
	Database DatabaseConfig
	Redis    RedisConfig
	Server   ServerConfig
}

var AppConfig *Config

func LoadConfig() *Config {
	err := godotenv.Load()
	if err != nil {
		log.Printf("Warning: .env file not found: %v", err)
	}

	cfg := &Config{}

	// Database
	cfg.Database.URL = GetEnv("DATABASE_URL", "")
	if cfg.Database.URL == "" {
		log.Fatalf("Error: DATABASE_URL environment variable is required")
	}
	cfg.Database.PoolSize = GetEnvAsInt("DB_POOL_SIZE", 10)
	cfg.Database.MaxOverflow = GetEnvAsInt("DB_MAX_OVERFLOW", 30)
	cfg.Database.EchoSQLQueries = GetEnvAsBool("ECHO_SQL_QUERIES", false)
	cfg.Database.AutogenerateDB = GetEnvAsBool("AUTOGENERATE_DB", false)

	// Server
	cfg.Server.WebAppHost = GetEnv("WEBAPP_HOST", "")
	if !ipRe.MatchString(cfg.Server.WebAppHost) {
		fmt.Printf("%s is not a valid IP address.\n", cfg.Server.WebAppHost)
		fmt.Println("WEBAPP_HOST will be set to 0.0.0.0")
		cfg.Server.WebAppHost = "0.0.0.0"
	}
	cfg.Server.WebAppPort = GetEnvAsInt("WEBAPP_PORT", 8000)
	cfg.Server.CertFile = GetEnv("CERT_FILE", "")
	cfg.Server.KeyFile = GetEnv("KEY_FILE", "")

	// Redis
	cfg.Redis.Host = GetEnv("REDIS_HOST", "")
	if !ipRe.MatchString(cfg.Redis.Host) {
		fmt.Printf("%s is not a valid IP address.\n", cfg.Redis.Host)
		fmt.Println("REDIS_HOST will be set to 127.0.0.1")
		cfg.Redis.Host = "127.0.0.1"
	}
	cfg.Redis.Port = GetEnvAsInt("REDIS_PORT", 6379)
	cfg.Redis.DB = GetEnvAsInt("REDIS_DB", 1)
	cfg.Redis.Password = GetEnv("REDIS_PASSWORD", "")

	AppConfig = cfg
	return cfg
}

func GetEnv(key, fallback string) string {
	value, exists := os.LookupEnv(key)
	if !exists {
		value = fallback
	}
	return value
}

func GetEnvAsBool(name string, defaultVal bool) bool {
	valStr := GetEnv(name, "")
	if val, err := strconv.ParseBool(valStr); err == nil {
		return val
	}
	return defaultVal
}

func GetEnvAsInt(name string, defaultVal int) int {
	valStr := GetEnv(name, "")
	if val, err := strconv.Atoi(valStr); err == nil {
		return val
	}
	return defaultVal
}

func GetEnvAsInt64(name string, defaultVal int64) int64 {
	valStr := GetEnv(name, "")
	if val, err := strconv.ParseInt(valStr, 10, 64); err == nil {
		return val
	}
	return defaultVal
}
