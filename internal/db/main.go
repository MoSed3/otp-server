package db

import (
	"context"
	"errors"
	"fmt"
	"log"
	"time"

	"gorm.io/driver/postgres"
	"gorm.io/gorm"
	"gorm.io/gorm/logger"

	"github.com/MoSed3/otp-server/internal/config"
	"github.com/MoSed3/otp-server/internal/models"
	"github.com/MoSed3/otp-server/internal/repository"
)

// DB represents the database connection.
type DB struct {
	*gorm.DB
}

// NewDB initializes a new GORM database connection.
func NewDB(dbConfig config.DatabaseConfig) (*DB, error) {
	// Configure logger based on EchoSQLQueries setting
	var logMode logger.LogLevel
	if dbConfig.EchoSQLQueries {
		logMode = logger.Info
	} else {
		logMode = logger.Silent
	}

	gormDB, err := gorm.Open(postgres.Open(dbConfig.URL), &gorm.Config{
		Logger: logger.Default.LogMode(logMode),
	})
	if err != nil {
		return nil, fmt.Errorf("failed to connect to database: %w", err)
	}
	fmt.Println("Connected to PostgresSQL database successfully")

	db := &DB{gormDB}

	// Configure connection pool
	sqlDB, err := gormDB.DB()
	if err != nil {
		return nil, fmt.Errorf("failed to get underlying sql.DB: %w", err)
	}

	// Set connection pool parameters
	sqlDB.SetMaxOpenConns(dbConfig.PoolSize + dbConfig.MaxOverflow)
	sqlDB.SetMaxIdleConns(dbConfig.PoolSize)
	sqlDB.SetConnMaxLifetime(time.Hour)

	return db, nil
}

// Init initializes the database and performs auto-migration/seeding.
func Init(dbConfig config.DatabaseConfig) (*DB, error) {
	db, err := NewDB(dbConfig)
	if err != nil {
		return nil, fmt.Errorf("error initializing database: %w", err)
	}

	if dbConfig.AutogenerateDB {
		settingRepo := repository.NewSetting()
		db.autoMigrateAndSeedSettings(settingRepo)
	}
	return db, nil
}

// Stop closes the database connection.
func (db *DB) Stop() error {
	if db != nil {
		sqlDB, err := db.DB.DB()
		if err != nil {
			return fmt.Errorf("failed to get underlying sql.DB for stopping: %w", err)
		}
		return sqlDB.Close()
	}
	return nil
}

func (db *DB) autoMigrateAndSeedSettings(settingRepo repository.Setting) {
	err := db.AutoMigrate(&models.User{}, &models.UserOtp{}, &models.Setting{}, &models.Admin{})
	if err != nil {
		log.Fatalf("failed to auto migrate database: %v", err)
	}
	fmt.Println("Database auto-migrated successfully")

	// Check if setting table is empty and create default settings if it is
	_, err = settingRepo.Get(db.DB)
	if err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			if err := settingRepo.Create(db.DB); err != nil {
				log.Fatalf("failed to create default settings: %v", err)
			}
			fmt.Println("Default settings created successfully")
		} else {
			log.Fatalf("failed to get settings: %v", err)
		}
	}
}

// GetTransaction returns a new transaction with the given context.
func (db *DB) GetTransaction(ctx context.Context) *gorm.DB {
	return db.Begin().WithContext(ctx)
}
