package config

import (
	"fmt"
	"log"
	"os"
	"regexp"
	"strconv"

	"github.com/joho/godotenv"
)

// ipPattern Regular expression pattern for validating an IP address
var ipRe = regexp.MustCompile(`^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$`)

var (
	// Database
	DbUrl          string
	DbPoolSize     int
	DbMaxOverflow  int
	EchoSQLQueries bool
	AutogenerateDB bool

	// Redis
	RedisHost     string
	RedisPort     int
	RedisDB       int
	RedisPassword string

	// Server
	WebAppHost string
	WebAppPort int
	CertFile   string
	KeyFile    string
)

func Init() {
	err := godotenv.Load()
	if err != nil {
		log.Printf("Warning: .env file not found: %v", err)
	}

	// Database
	DbUrl = GetEnv("DATABASE_URL", "")
	if DbUrl == "" {
		log.Fatal("Database URL can't be Empty")
	}
	DbPoolSize = GetEnvAsInt("DB_POOL_SIZE", 10)
	DbMaxOverflow = GetEnvAsInt("DB_MAX_OVERFLOW", 30)
	EchoSQLQueries = GetEnvAsBool("ECHO_SQL_QUERIES", false)
	AutogenerateDB = GetEnvAsBool("AUTOGENERATE_DB", false)

	// Server
	WebAppHost = GetEnv("WEBAPP_HOST", "")
	if !ipRe.MatchString(WebAppHost) {
		fmt.Printf("%s is not a valid IP address.\n", WebAppHost)
		fmt.Println("WEBAPP_HOST will be set to 0.0.0.0")
		WebAppHost = "0.0.0.0"
	}
	WebAppPort = GetEnvAsInt("WEBAPP_PORT", 8000)
	CertFile = GetEnv("CERT_FILE", "")
	KeyFile = GetEnv("KEY_FILE", "")

	// Redis
	RedisHost = GetEnv("REDIS_HOST", "")
	if !ipRe.MatchString(RedisHost) {
		fmt.Printf("%s is not a valid IP address.\n", RedisHost)
		fmt.Println("REDIS_HOST will be set to 127.0.0.1")
		RedisHost = "127.0.0.1"
	}
	RedisPort = GetEnvAsInt("REDIS_PORT", 6379)
	RedisDB = GetEnvAsInt("REDIS_DB", 1)
	RedisPassword = GetEnv("REDIS_PASSWORD", "")
}

func GetEnv(key, fallback string) string {
	value, exists := os.LookupEnv(key)
	if !exists {
		value = fallback
	}
	return value
}

func GetEnvAsBool(name string, defaultVal bool) bool {
	valStr := GetEnv(name, "")
	if val, err := strconv.ParseBool(valStr); err == nil {
		return val
	}
	return defaultVal
}

func GetEnvAsInt(name string, defaultVal int) int {
	valStr := GetEnv(name, "")
	if val, err := strconv.Atoi(valStr); err == nil {
		return val
	}
	return defaultVal
}

func GetEnvAsInt64(name string, defaultVal int64) int64 {
	valStr := GetEnv(name, "")
	if val, err := strconv.ParseInt(valStr, 10, 64); err == nil {
		return val
	}
	return defaultVal
}
