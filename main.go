// @title           OTP Server API
// @version         0.1.0
// @description     A REST API server for OTP-based authentication

// @contact.name   Mohammad Seddighi

// @BasePath /api/v1

// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization
// @description Type "Bearer" followed by a space and UUID/JWT token.

package main

import (
	"context"
	"log"
	"net"
	"os"
	"os/signal"
	"strconv"
	"syscall"
	"time"

	"github.com/MoSed3/otp-server/config"
	"github.com/MoSed3/otp-server/db"
	"github.com/MoSed3/otp-server/redis"
	"github.com/MoSed3/otp-server/router"
	"github.com/MoSed3/otp-server/setting"
)

func main() {
	config.Init()
	db.Init(config.AutogenerateDB)
	setting.Init()

	if err := redis.Init(
		net.JoinHostPort(config.RedisHost, strconv.Itoa(config.RedisPort)),
		config.RedisPassword,
		config.RedisDB,
	); err != nil {
		log.Fatal(err)
	}
	defer redis.Disconnect()

	r := router.New(net.JoinHostPort(config.WebAppHost, strconv.Itoa(config.WebAppPort)), config.CertFile, config.KeyFile)
	server := r.Start()

	log.Println("Server started successfully")

	exit := make(chan os.Signal, 1)
	signal.Notify(exit, os.Interrupt, syscall.SIGTERM)

	<-exit
	log.Println("Shutting down server...")

	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	if err := server.Shutdown(ctx); err != nil {
		log.Printf("Server forced to shutdown: %v", err)
	}

	log.Println("Server exited")
}
